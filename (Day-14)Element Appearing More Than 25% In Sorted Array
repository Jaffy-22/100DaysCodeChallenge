/*
Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.

Example 1:
Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6

Example 2:
Input: arr = [1,1]
Output: 1
 
Constraints:
1 <= arr.length <= 104
0 <= arr[i] <= 105
*/
class Solution {
    public int findSpecialInteger(int[] arr) {
        int maxVal = Integer.MIN_VALUE;
        for (int num : arr) {
            maxVal = Math.max(maxVal, num);
        }

        int[] freq = new int[maxVal + 1];
        int len = arr.length;
        double per = 0.25 * len;

        for (int i = 0; i < len; i++) {
            freq[arr[i]]++;
        }
        for (int i = 0; i <= maxVal; i++) {
            if (freq[i] > per) {
                return i;
            }
        }
        return -1; 
    }
}
