/*
Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.
Return the sorted string. If there are multiple answers, return any of them.

Example 1:
Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.

Example 2:
Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.

Example 3:
Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
*/
class Solution {
    public String frequencySort(String s) {
        StringBuilder res = new StringBuilder();
        int[][] freq = new int[256][2];

        for(int i = 0; i < s.length(); i++){
            char ch = s.charAt(i);
            freq[ch][0]++;
            freq[ch][1] = ch;
        }

        Arrays.sort(freq, Comparator.comparingInt(a -> -a[0]));

        for(int i = 0; i < 256; i++){
            if (freq[i][0] == 0) break;
            for (int j = 0; j < freq[i][0]; j++) {
                res.append((char)freq[i][1]);
            }
        }

        return res.toString();
    }
}
